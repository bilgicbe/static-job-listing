{"version":3,"sources":["components/JobBoardComponent.js","App.js","reportWebVitals.js","index.js"],"names":["JobBoardComponent","job","handleTagClick","langAndTools","role","level","languages","push","tools","className","featured","src","logo","alt","company","new","position","postedAt","contract","location","map","langAndTool","onClick","App","useState","jobs","setJobs","filters","setFilters","useEffect","data","tag","includes","filteredJobs","filter","tags","length","every","passedFilter","f","id","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qLAsCeA,EApCW,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,IAAKC,EAAqB,EAArBA,eAExBC,EAAe,CAACF,EAAIG,KAAMH,EAAII,OAWpC,OATGJ,EAAIK,WACHH,EAAaI,KAAb,MAAAJ,EAAY,YAASF,EAAIK,YAG1BL,EAAIO,OACHL,EAAaI,KAAb,MAAAJ,EAAY,YAASF,EAAIO,QAKzB,sBAAKC,UAAS,gGAA2FR,EAAIS,UAAJ,4CAAzG,UACI,8BACI,qBAAKD,UAAU,wCAAwCE,IAAKV,EAAIW,KAAMC,IAAKZ,EAAIa,YAEnF,sBAAKL,UAAU,qCAAf,UACI,qBAAIA,UAAU,0BAAd,UACKR,EAAIa,QACJb,EAAIc,KAAQ,sBAAMN,UAAU,oDAAhB,kBACZR,EAAIS,UAAa,sBAAMD,UAAU,oDAAhB,yBAEtB,oBAAIA,UAAU,kFAAd,SAAiGR,EAAIe,WACrG,oBAAGP,UAAU,gBAAb,UACKR,EAAIgB,SADT,MACsBhB,EAAIiB,SAD1B,MACuCjB,EAAIkB,eAG/C,qBAAKV,UAAU,oIAAf,SACKN,EAAeA,EAAaiB,KAAI,SAACC,GAAD,OAC7B,sBAAMC,QAAS,kBAAMpB,EAAemB,IAAcZ,UAAU,6HAA5D,SAA0LY,OAAuB,S,OCiDtNE,MA9Ef,WACE,MAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA8BF,mBAAS,IAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KAEAC,qBAAU,WACRH,EAAQI,KACP,IAEH,IAkBM5B,EAAiB,SAAC6B,GAClBJ,EAAQK,SAASD,IAErBH,EAAW,GAAD,mBAAKD,GAAL,CAAcI,MAGpBE,EAAeR,EAAKS,QAxBP,SAAC,GAAuC,IAArC9B,EAAoC,EAApCA,KAAMC,EAA8B,EAA9BA,MAAOG,EAAuB,EAAvBA,MAAOF,EAAgB,EAAhBA,UAClC6B,EAAO,CAAC/B,EAAMC,GAEpB,OAAuB,IAAnBsB,EAAQS,SAIR9B,GACF6B,EAAK5B,KAAL,MAAA4B,EAAI,YAAS7B,IAGXE,GACF2B,EAAK5B,KAAL,MAAA4B,EAAI,YAAS3B,IAGRmB,EAAQU,OAAM,SAACH,GAAD,OAAYC,EAAKH,SAASE,UAoBjD,OACE,sBAAKzB,UAAU,MAAf,UACE,wBAAQA,UAAU,oBAAlB,SACE,qBAAKE,IAAI,iCAAiCE,IAAI,SAE/Cc,EAAQS,OAAS,GAChB,sBAAK3B,UAAU,6GAAf,UAEGkB,EAAQP,KAAI,SAACc,GAAD,OACX,uBACEzB,UAAU,mCADZ,UAEE,sBAAMA,UAAU,0CAAhB,SAA2DyB,IAC3D,sBAAMzB,UAAU,uFAChBa,QAAS,kBAtBMgB,EAsBkBJ,OArB3CN,EAAWD,EAAQO,QAAO,SAAAK,GAAC,OAAIA,IAAMD,MADb,IAACA,GAqBf,qBAKJ,wBAAQhB,QAtBK,WACnBM,EAAW,KAsBHnB,UAAU,kCADZ,sBAIa,IAAhBgB,EAAKW,OACJ,qDAEAH,EAAab,KAAI,SAACnB,GAAD,OACf,cAAC,EAAD,CACEA,IAAKA,EAELC,eAAgBA,GADXD,EAAIuC,WC9DNC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.744f6992.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst JobBoardComponent = ({ job, handleTagClick }) => {\r\n\r\n    const langAndTools = [job.role, job.level];\r\n\r\n    if(job.languages) {\r\n        langAndTools.push(...job.languages)\r\n    }\r\n\r\n    if(job.tools) {\r\n        langAndTools.push(...job.tools)\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={`flex flex-col lg:flex-row bg-white shadow-lg my-16 lg:my-8 mx-10 lg:mx-32 p-6 rounded ${job.featured && `border-solid border-teal-500 border-l-8 `}`}>\r\n            <div>\r\n                <img className=\"-mt-16 lg:mt-0 mb-4 lg:mb-0 w-20 h-20\" src={job.logo} alt={job.company} />\r\n            </div>\r\n            <div className=\"flex flex-col justify-between ml-4\">\r\n                <h3 className=\"font-bold text-teal-500\">\r\n                    {job.company}\r\n                    {job.new && (<span className=\"text-white bg-teal-500 m-2 py-1 px-2 rounded-full\">NEW!</span>)}\r\n                    {job.featured && (<span className=\"text-white bg-gray-800 m-2 py-1 px-2 rounded-full\">FEATURED</span>)}\r\n                </h3>\r\n                <h2 className=\"font-bold tracking-wide hover:text-teal-500 cursor-pointer text-xl my-2 lg:my-0\">{job.position}</h2>\r\n                <p className=\"text-gray-700\">\r\n                    {job.postedAt} * {job.contract} * {job.location}\r\n                </p>\r\n            </div>\r\n            <div className=\"flex flex-wrap items-center m-4 pt-4 border-t border-gray-500 border-solid lg:m-0 lg:pt-0 lg:border-t-0 lg:border-none lg:ml-auto\">\r\n                {langAndTools ? langAndTools.map((langAndTool) =>\r\n                    <span onClick={() => handleTagClick(langAndTool)} className=\"cursor-pointer text-teal-500 hover:text-white bg-teal-100 hover:bg-teal-500 font-bold mr-4 mb-4 lg:mb-0 lg:m-2 p-2 rounded\">{langAndTool}</span>) : ''}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default JobBoardComponent","import JobBoardComponent from \"./components/JobBoardComponent\";\nimport data from \"./assets/data.json\"\nimport React, { useState, useEffect } from \"react\";\n\nfunction App() {\n  const [jobs, setJobs] = useState([])\n  const [filters, setFilters] = useState([])\n\n  useEffect(() => {\n    setJobs(data);\n  }, []);\n\n  const filterFunc = ({ role, level, tools, languages }) => {\n    const tags = [role, level];\n\n    if (filters.length === 0) {\n      return true\n    }\n\n    if (languages) {\n      tags.push(...languages)\n    }\n\n    if (tools) {\n      tags.push(...tools)\n    }\n\n    return filters.every((filter) => tags.includes(filter))\n  }\n\n  const handleTagClick = (tag) => {\n    if (filters.includes(tag)) return;\n\n    setFilters([...filters, tag])\n  }\n\n  const filteredJobs = jobs.filter(filterFunc);\n\n  const handleFilterClick = (passedFilter) => {\n    setFilters(filters.filter(f => f !== passedFilter))\n  }\n\n  const clearFilters = () => {\n    setFilters([])\n  }\n\n\n  return (\n    <div className=\"App\">\n      <header className=\"bg-teal-500 mb-12\">\n        <img src=\"./images/bg-header-desktop.svg\" alt=\"bg\"/>\n      </header>\n      {filters.length > 0 && (\n        <div className=\"flex flex-wrap bg-white shadow-lg \n      -my-20 mb-16 lg:-my-20 lg:mb-8 mx-10 lg:mx-32 p-6 rounded z-10 relative\" >\n          {filters.map((filter) => (\n            <span\n              className=\"font-bold m-2 lg:m-2 p-2 rounded\">\n              <span className=\"text-teal-500 bg-teal-100 p-2 rounded-l\">{filter}</span>\n              <span className=\"bg-teal-500 cursor-pointer hover:bg-gray-800 text-white p-2 rounded-r font-extrabold\"\n              onClick={() => handleFilterClick(filter)}>X</span>\n            </span>\n          ))}\n\n          <button onClick={clearFilters}\n            className=\"font-bold text-gray-500 ml-auto\">Clear</button>\n        </div>\n      )}\n      {jobs.length === 0 ? (\n        <p>Jobs are fetching...</p>\n      ) : (\n        filteredJobs.map((job) => (\n          <JobBoardComponent\n            job={job}\n            key={job.id}\n            handleTagClick={handleTagClick}\n          />))\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}